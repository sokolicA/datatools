% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/StatFrame.R, R/sugar.R
\name{StatFrame}
\alias{StatFrame}
\alias{SF}
\title{StatFrame Class}
\usage{
SF(df)
}
\arguments{
\item{df}{An object of class \code{DataFrame} or \code{data.frame}.}
}
\value{
A \code{StatFrame} object.
}
\description{
A wrapper around \code{DataFrame} or \code{data.frame} objects with statistical calculations available.
All the calculations return a \code{data.table} object.
}
\section{Functions}{
\itemize{
\item \code{SF()}: StatFrame$new() constructor sugar

}}
\examples{

## ------------------------------------------------
## Method `StatFrame$filter`
## ------------------------------------------------

sf <- SF(data.frame(a=1:5, b=1:5))
sf$filter(a > 2)
sf$filter(c(1, 3, 5))
sf$filter(c(TRUE, NA, FALSE, FALSE, TRUE))

## ------------------------------------------------
## Method `StatFrame$count`
## ------------------------------------------------

sf <- SF(data.frame(a=1:5, b=1:5))
sf$count()
sf <- SF(data.frame(a=c(1,1,1,2,3), b=1:5))
sf$count(by = list(a)) # df$count(by = .(a))
Data aggregation


## ------------------------------------------------
## Method `StatFrame$aggregate`
## ------------------------------------------------

sf <- SF(data.frame(a=1:5, b=6:10))
sum_squares <- function(x) sum(x**2)
# sf$import_function(sum_squares) # necessary only if sum_squares is defined locally
sf$aggregate(list(sum_squares(x), mean(x), sd(x))) #mean and sd are always globally accessible
sf$aggregate(list(max(x), mean(x)), by = .(cond = !b \%in\% c(6, 7)))
sf <- SF(data.frame(a=c(1:5, NA), b=6:11))
sf$aggregate(list(mean(x), mean_na_rm = mean(x, na.rm=T)))

## ------------------------------------------------
## Method `StatFrame$sum`
## ------------------------------------------------

sf <- SF(data.frame(a=1:5, b=6:10))
sf$sum()
sf$sum("a")

## ------------------------------------------------
## Method `StatFrame$mean`
## ------------------------------------------------

sf <- SF(data.frame(a=1:5, b=6:10))
sf$mean()
sf$mean("a")

## ------------------------------------------------
## Method `StatFrame$sd`
## ------------------------------------------------

sf <- SF(data.frame(a=1:5, b=6:10))
sf$sd()
sf$sd("a")

## ------------------------------------------------
## Method `StatFrame$mad`
## ------------------------------------------------

sf <- SF(data.frame(a=1:5, b=6:10))
sf$mad()
sf$mad("a")

## ------------------------------------------------
## Method `StatFrame$IQR`
## ------------------------------------------------

sf <- SF(data.frame(a=1:5, b=6:10))
sf$IQR()
sf$IQR("a")

## ------------------------------------------------
## Method `StatFrame$median`
## ------------------------------------------------

sf <- SF(data.frame(a=1:5, b=6:10))
sf$median()
sf$median("a")

## ------------------------------------------------
## Method `StatFrame$min`
## ------------------------------------------------

sf <- SF(data.frame(a=1:5, b=6:10))
sf$min()
sf$min("a")

## ------------------------------------------------
## Method `StatFrame$max`
## ------------------------------------------------

sf <- SF(data.frame(a=1:5, b=6:10))
sf$max()
sf$max("a")

## ------------------------------------------------
## Method `StatFrame$quantile`
## ------------------------------------------------

sf <- SF(data.frame(a=1:5, b=6:10))
sf$quantile()
sf$quantile(columns="a")

## ------------------------------------------------
## Method `StatFrame$missing_data_summary`
## ------------------------------------------------

sf <- SF(data.frame(a=c(1:5,NA, NA), b=c(1:6, NA)))
sf$missing_data_summary()

## ------------------------------------------------
## Method `StatFrame$map`
## ------------------------------------------------

sf <- SF(data.frame(a=1:5, b=6:10))
add_2 <- function(x) x+2
# sf$import_function(add_2) # necessary only if sum_squares is defined locally
sf$map(add_2) #mean and sd are always globally accessible
sf$map(as.character)

## ------------------------------------------------
## Method `StatFrame$describe`
## ------------------------------------------------

sf <- SF(data.frame(a=1:5, b=6:10))
sf$describe()
sf <- SF(data.table(a=1, b=2, key="a"))
sf <- SF(DF(data.table(a=1, b=2), key="a"))

}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{DF}}{The underlying \code{DataFrame} object.}

\item{\code{imported_functions}}{List of functions imported with \verb{$import_function}.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-StatFrame-new}{\code{StatFrame$new()}}
\item \href{#method-StatFrame-print}{\code{StatFrame$print()}}
\item \href{#method-StatFrame-filter}{\code{StatFrame$filter()}}
\item \href{#method-StatFrame-count}{\code{StatFrame$count()}}
\item \href{#method-StatFrame-aggregate}{\code{StatFrame$aggregate()}}
\item \href{#method-StatFrame-sum}{\code{StatFrame$sum()}}
\item \href{#method-StatFrame-mean}{\code{StatFrame$mean()}}
\item \href{#method-StatFrame-sd}{\code{StatFrame$sd()}}
\item \href{#method-StatFrame-mad}{\code{StatFrame$mad()}}
\item \href{#method-StatFrame-IQR}{\code{StatFrame$IQR()}}
\item \href{#method-StatFrame-median}{\code{StatFrame$median()}}
\item \href{#method-StatFrame-min}{\code{StatFrame$min()}}
\item \href{#method-StatFrame-max}{\code{StatFrame$max()}}
\item \href{#method-StatFrame-quantile}{\code{StatFrame$quantile()}}
\item \href{#method-StatFrame-missing_data_summary}{\code{StatFrame$missing_data_summary()}}
\item \href{#method-StatFrame-map}{\code{StatFrame$map()}}
\item \href{#method-StatFrame-describe}{\code{StatFrame$describe()}}
\item \href{#method-StatFrame-import_function}{\code{StatFrame$import_function()}}
\item \href{#method-StatFrame-copy}{\code{StatFrame$copy()}}
\item \href{#method-StatFrame-clone}{\code{StatFrame$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StatFrame-new"></a>}}
\if{latex}{\out{\hypertarget{method-StatFrame-new}{}}}
\subsection{Method \code{new()}}{
\code{StatFrame} Constructor
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StatFrame$new(df)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{df}}{An object of class \code{DataFrame} or \code{data.frame}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StatFrame-print"></a>}}
\if{latex}{\out{\hypertarget{method-StatFrame-print}{}}}
\subsection{Method \code{print()}}{
Print the table object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StatFrame$print()}\if{html}{\out{</div>}}
}

\subsection{Details}{
The method used is \code{print.data.table}.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StatFrame-filter"></a>}}
\if{latex}{\out{\hypertarget{method-StatFrame-filter}{}}}
\subsection{Method \code{filter()}}{
Create a new \code{StatFrame} with filter applied to the table rows.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StatFrame$filter(keep)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{keep}}{An expression to be evaluated inside the table, integer vector specifying rows to remove or a logical vector. See details.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\itemize{
\item If an expression is passed it will be evaluated inside the context of the table.
\item Passing duplicated numbers will duplicate such rows and passing numbers larger than the number of rows will result in \code{NA} rows..
\item If a logical vector is passed it must be of the same length as the number of rows. Logical \code{NA} values are treated as \code{FALSE} and those rows will not be kept.
}
}

\subsection{Returns}{
A new \code{StatFrame} with filtered rows.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{sf <- SF(data.frame(a=1:5, b=1:5))
sf$filter(a > 2)
sf$filter(c(1, 3, 5))
sf$filter(c(TRUE, NA, FALSE, FALSE, TRUE))
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StatFrame-count"></a>}}
\if{latex}{\out{\hypertarget{method-StatFrame-count}{}}}
\subsection{Method \code{count()}}{
Count the number of rows.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StatFrame$count(by = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{by}}{An optional list() specifying the columns to group by. Defaults to no grouping.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A keyed data.table with the row counts in the \code{N} column and the key to columns passed in \code{by}.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{sf <- SF(data.frame(a=1:5, b=1:5))
sf$count()
sf <- SF(data.frame(a=c(1,1,1,2,3), b=1:5))
sf$count(by = list(a)) # df$count(by = .(a))
Data aggregation

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StatFrame-aggregate"></a>}}
\if{latex}{\out{\hypertarget{method-StatFrame-aggregate}{}}}
\subsection{Method \code{aggregate()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StatFrame$aggregate(funs, columns = is.numeric, by = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{funs}}{A single function or a list of functions used to create an aggregate summary. See details.}

\item{\code{columns}}{Optional list of columns to aggregate or a predicate. Defaults to all numeric columns.}

\item{\code{by}}{By group.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
IMPORTANT: In order to use locally defined functions, they first have to be imported into the object with the \verb{$import_function} method.
This ensures that they are found in the execution path.
Passing a named list of functions will result in using the names in the output. See examples.
}

\subsection{Returns}{
A \code{data.table}.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{sf <- SF(data.frame(a=1:5, b=6:10))
sum_squares <- function(x) sum(x**2)
# sf$import_function(sum_squares) # necessary only if sum_squares is defined locally
sf$aggregate(list(sum_squares(x), mean(x), sd(x))) #mean and sd are always globally accessible
sf$aggregate(list(max(x), mean(x)), by = .(cond = !b \%in\% c(6, 7)))
sf <- SF(data.frame(a=c(1:5, NA), b=6:11))
sf$aggregate(list(mean(x), mean_na_rm = mean(x, na.rm=T)))
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StatFrame-sum"></a>}}
\if{latex}{\out{\hypertarget{method-StatFrame-sum}{}}}
\subsection{Method \code{sum()}}{
Sum the columns
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StatFrame$sum(columns = is.numeric, by = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{columns}}{Optional list of columns to sum. Defaults to all numeric columns.}

\item{\code{by}}{Grouping}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\code{NA} values are not ignored.
}

\subsection{Returns}{
A \code{data.table} with the summed columns.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{sf <- SF(data.frame(a=1:5, b=6:10))
sf$sum()
sf$sum("a")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StatFrame-mean"></a>}}
\if{latex}{\out{\hypertarget{method-StatFrame-mean}{}}}
\subsection{Method \code{mean()}}{
Calculate the mean of the columns
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StatFrame$mean(columns = is.numeric, by = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{columns}}{Optional list of columns to calculate the mean. Defaults to all numeric columns.}

\item{\code{by}}{Grouping}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\code{NA} values are not ignored.
}

\subsection{Returns}{
A \code{data.table} with the means calculated.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{sf <- SF(data.frame(a=1:5, b=6:10))
sf$mean()
sf$mean("a")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StatFrame-sd"></a>}}
\if{latex}{\out{\hypertarget{method-StatFrame-sd}{}}}
\subsection{Method \code{sd()}}{
Calculate the standard deviation of the columns
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StatFrame$sd(columns = is.numeric, by = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{columns}}{Optional list of columns to calculate the standard deviation. Defaults to all numeric columns.}

\item{\code{by}}{Grouping.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\code{NA} values are not ignored.
}

\subsection{Returns}{
A \code{data.table} with the standard deviations calculated.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{sf <- SF(data.frame(a=1:5, b=6:10))
sf$sd()
sf$sd("a")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StatFrame-mad"></a>}}
\if{latex}{\out{\hypertarget{method-StatFrame-mad}{}}}
\subsection{Method \code{mad()}}{
Calculate the Median Absolute Deviation of the columns
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StatFrame$mad(columns = is.numeric, by = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{columns}}{Optional list of columns to calculate the Median Absolute Deviation. Defaults to all numeric columns.}

\item{\code{by}}{Grouping}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\code{NA} values are not ignored.
}

\subsection{Returns}{
A \code{data.table} with the Median Absolute Deviation calculated.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{sf <- SF(data.frame(a=1:5, b=6:10))
sf$mad()
sf$mad("a")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StatFrame-IQR"></a>}}
\if{latex}{\out{\hypertarget{method-StatFrame-IQR}{}}}
\subsection{Method \code{IQR()}}{
Calculate the Interquartile Range of the columns
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StatFrame$IQR(columns = is.numeric, by = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{columns}}{Optional list of columns to calculate the Interquartile Range. Defaults to all numeric columns.}

\item{\code{by}}{Grouping}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\code{NA} values are not ignored.
}

\subsection{Returns}{
A \code{data.table} with the Interquartile Range calculated.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{sf <- SF(data.frame(a=1:5, b=6:10))
sf$IQR()
sf$IQR("a")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StatFrame-median"></a>}}
\if{latex}{\out{\hypertarget{method-StatFrame-median}{}}}
\subsection{Method \code{median()}}{
Calculate the median of the columns
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StatFrame$median(columns = is.numeric, by = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{columns}}{Optional list of columns to calculate the median. Defaults to all numeric columns.}

\item{\code{by}}{Grouping}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\code{NA} values are not ignored.
}

\subsection{Returns}{
A \code{data.table} with the medians calculated.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{sf <- SF(data.frame(a=1:5, b=6:10))
sf$median()
sf$median("a")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StatFrame-min"></a>}}
\if{latex}{\out{\hypertarget{method-StatFrame-min}{}}}
\subsection{Method \code{min()}}{
Calculate the minimum value of the columns
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StatFrame$min(columns = is.numeric, by = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{columns}}{Optional list of columns to calculate the minimum. Defaults to all numeric columns.}

\item{\code{by}}{Grouping}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\code{NA} values are not ignored.
}

\subsection{Returns}{
A \code{data.table} with the minimums calculated.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{sf <- SF(data.frame(a=1:5, b=6:10))
sf$min()
sf$min("a")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StatFrame-max"></a>}}
\if{latex}{\out{\hypertarget{method-StatFrame-max}{}}}
\subsection{Method \code{max()}}{
Calculate the maximum value of the columns
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StatFrame$max(columns = is.numeric, by = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{columns}}{Optional list of columns to calculate the maximum. Defaults to all numeric columns.}

\item{\code{by}}{Grouping}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\code{NA} values are not ignored.
}

\subsection{Returns}{
A \code{data.table} with the maximum values calculated.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{sf <- SF(data.frame(a=1:5, b=6:10))
sf$max()
sf$max("a")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StatFrame-quantile"></a>}}
\if{latex}{\out{\hypertarget{method-StatFrame-quantile}{}}}
\subsection{Method \code{quantile()}}{
Calculate quantiles of columns
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StatFrame$quantile(columns = is.numeric, by = NULL, probs = seq(0, 1, 0.25))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{columns}}{Optional list of columns to calculate the quantiles Defaults to all numeric columns.}

\item{\code{by}}{Grouping}

\item{\code{probs}}{Vector of probabilities.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\code{NA} values are not ignored.
}

\subsection{Returns}{
A \code{data.table} with the quantiles calculated.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{sf <- SF(data.frame(a=1:5, b=6:10))
sf$quantile()
sf$quantile(columns="a")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StatFrame-missing_data_summary"></a>}}
\if{latex}{\out{\hypertarget{method-StatFrame-missing_data_summary}{}}}
\subsection{Method \code{missing_data_summary()}}{
Summary on missing values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StatFrame$missing_data_summary(columns = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{columns}}{Optional selection of columns.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{sf <- SF(data.frame(a=c(1:5,NA, NA), b=c(1:6, NA)))
sf$missing_data_summary()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StatFrame-map"></a>}}
\if{latex}{\out{\hypertarget{method-StatFrame-map}{}}}
\subsection{Method \code{map()}}{
Apply a function to columns
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StatFrame$map(fun, columns = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fun}}{Function to apply. See details.}

\item{\code{columns}}{Optional list of columns to apply the function on. Can also be a predicate (e.g. \code{is.numeric})}

\item{\code{...}}{Additional arguments passed to \code{fun}}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
IMPORTANT: In order to use locally defined functions, they first have to be imported into the object with the \verb{$import_function} method.
This ensures that they are found in the execution path.
}

\subsection{Returns}{
A \code{StatFrame}.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{sf <- SF(data.frame(a=1:5, b=6:10))
add_2 <- function(x) x+2
# sf$import_function(add_2) # necessary only if sum_squares is defined locally
sf$map(add_2) #mean and sd are always globally accessible
sf$map(as.character)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StatFrame-describe"></a>}}
\if{latex}{\out{\hypertarget{method-StatFrame-describe}{}}}
\subsection{Method \code{describe()}}{
IN DEVELOPMENT. Show summary of the data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StatFrame$describe(col_type = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_type}}{Optional type of columns to show the summary for. Defaults to all types.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \code{data.table}.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{sf <- SF(data.frame(a=1:5, b=6:10))
sf$describe()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StatFrame-import_function"></a>}}
\if{latex}{\out{\hypertarget{method-StatFrame-import_function}{}}}
\subsection{Method \code{import_function()}}{
Import functions into the object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StatFrame$import_function(fun, name = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fun}}{A function object. If the function is anonymous it must be named with the \code{name} argument.}

\item{\code{name}}{The name of the function. Mandatory if the function is anonymous.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
The functions are stored in an environment that is used as an evaluation environment of some methods.
http://adv-r.had.co.nz/Environments.html#function-envs
https://stackoverflow.com/questions/57672803/apply-and-forceandcall-ignoring-get-from-parent-frame
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StatFrame-copy"></a>}}
\if{latex}{\out{\hypertarget{method-StatFrame-copy}{}}}
\subsection{Method \code{copy()}}{
Create a deep copy of the object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StatFrame$copy()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A deep copy of the object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StatFrame-clone"></a>}}
\if{latex}{\out{\hypertarget{method-StatFrame-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StatFrame$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
